{"version":3,"file":"main.js","mappings":"sBAAAA,SAASC,iBAAiB,oBAAoB,WAEzBD,SAASE,iBAAiB,yBAGlCC,SAAQ,SAACC,GAClBA,EAAUH,iBAAiB,UAAU,WAAM,OAAAI,EAAA,MAE3CA,EAAYD,SAIhB,IAoCME,EAAS,SAACF,GAMd,IALA,IAAMG,EAASH,EAAUI,UAAU,GAAGC,UAAU,IAC1CC,EAAaV,SAASW,cAAc,kBAAoBJ,GAExDK,EAAM,GAEO,MAAAC,MAAMC,KAAKJ,EAAWK,UAAtB,eAAiC,CAA/C,IAAMC,EAAI,KAEbJ,EAAIK,KAAK,CACPC,IAAKF,EAAKG,aAAa,YACvBC,OAAQC,KAAKC,MAAMN,EAAKG,aAAa,kBAIzC,OAAOP,GAcHW,EAAe,SAACnB,GACpB,IAAMoB,EAAapB,EAAUO,cAAc,SAASc,KAE9CC,EAdoB,SAACtB,GAC3B,IAAMuB,EAAuB,GAO7B,OANYrB,EAAOF,GAGfD,SAAQ,SAACyB,GAAc,OAAAD,EAAWV,KAAI,MAAfU,EAAmBC,EAAnB,WAGpBD,EAAWE,QAAO,SAACC,EAAMC,EAAOC,GAAS,OAAAD,IAAUC,EAAKC,QAAf,MAMvBC,CAAoB9B,GAG7C,OAAOsB,EAAiBd,KACtB,SAACuB,GACC,OAAAnC,SACGoC,eAAeZ,EAAWa,KAAO,IAAMF,GACvCG,QAAQ,eAAeC,kBAI1BlC,EAAc,SAACD,GACnB,IAAMoC,EAvES,SAACpC,GAEhB,GANc,SAACA,GACf,OAAOA,EAAUO,cAAc,qBAK3B8B,CAAQrC,GAAY,CACtB,IAAMsC,EACJtC,EAAUF,iBAAiB,qBAEvByC,EAAU9B,MAAMC,KAAK4B,GAAQE,MAAK,SAACC,GAAU,WAAAA,EAAMF,WAEzD,OAAKA,EAIEA,EAAQH,MAHN,GAMX,GAvBe,SAACpC,GAChB,OAAOA,EAAUO,cAAc,UAsB3BmC,CAAS1C,GAAY,CACvB,IAAMY,EAAOZ,EAAUO,cAAc,SAErC,OAAKK,EAIEA,EAAKG,aAAa,cAHhB,GAMX,MAAO,GA8CO4B,CAAS3C,GAEvB4C,EAAgB5C,EAAWoC,IAGvBQ,EAAkB,SAAC5C,EAAoBoC,GAC3C,IAAMhB,EAAapB,EAAUO,cAAc,SAASc,KAC9Cb,EAAMN,EAAOF,GACb6C,EAAS1B,EAAanB,GAItB8C,EAAoBtC,EAAIgC,MAAK,SAAChB,GAAc,OAAAA,EAAUV,MAAV,KAE5CiC,EAAgBD,EAAoBA,EAAkB9B,OAAS,GAErE6B,EAAO9C,SAAQ,SAACgC,GACd,IAAMiB,EAAajB,EAAMxB,cAAc,SACjC0C,EAAcD,EAAWE,GAAG7C,UAAUe,EAAWa,KAAKkB,OAAS,GAErE,IAAKJ,EAAcK,SAASH,GAI1B,OAFAlB,EAAMsB,MAAMC,QAAU,YACtBN,EAAWZ,WAAQmB,GAIrBxB,EAAMsB,MAAMC,QAAU,cCrHtBE,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBH,IAAjBI,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASL,EAAyBE,GAAY,CAGjDE,QAAS,IAOV,OAHAE,EAAoBJ,GAAUG,EAAQA,EAAOD,QAASH,GAG/CI,EAAOD,Q,mBCrBf,Q","sources":["webpack:///./assets/ts/maskfield.ts","webpack:///webpack/bootstrap","webpack:///./assets/main.ts"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", () => {\r\n  // Find every concerned maskfields\r\n  const maskfields = document.querySelectorAll(\".maskfield.form-group\");\r\n\r\n  // Handle every fields once and listen for change event to handle them\r\n  maskfields.forEach((maskfield) => {\r\n    maskfield.addEventListener(\"change\", () => handleField(maskfield));\r\n\r\n    handleField(maskfield);\r\n  });\r\n});\r\n\r\nconst isSelect = (maskfield: Element) => {\r\n  return maskfield.querySelector(\"select\");\r\n};\r\n\r\nconst isRadio = (maskfield: Element) => {\r\n  return maskfield.querySelector(\".form-check input\");\r\n};\r\n\r\nconst getValue = (maskfield: Element) => {\r\n  // If expanded option is used\r\n  if (isRadio(maskfield)) {\r\n    const radios: NodeListOf<HTMLInputElement> =\r\n      maskfield.querySelectorAll(\".form-check input\");\r\n\r\n    const checked = Array.from(radios).find((radio) => radio.checked === true);\r\n\r\n    if (!checked) {\r\n      return \"\";\r\n    }\r\n\r\n    return checked.value;\r\n  }\r\n\r\n  if (isSelect(maskfield)) {\r\n    const item = maskfield.querySelector(\".item\");\r\n\r\n    if (!item) {\r\n      return \"\";\r\n    }\r\n\r\n    return item.getAttribute(\"data-value\");\r\n  }\r\n\r\n  return \"\";\r\n};\r\n\r\nconst getMap = (maskfield: Element) => {\r\n  const uniqID = maskfield.classList[2].substring(10);\r\n  const mapElement = document.querySelector(\".maskfield-map-\" + uniqID);\r\n\r\n  const map = [];\r\n\r\n  for (const item of Array.from(mapElement.children)) {\r\n    // Extract data and push it into map array\r\n    map.push({\r\n      key: item.getAttribute(\"data-key\"),\r\n      values: JSON.parse(item.getAttribute(\"data-values\")),\r\n    });\r\n  }\r\n\r\n  return map;\r\n};\r\n\r\nconst getUniqueFieldsName = (maskfield: Element) => {\r\n  const fieldsName: string[] = [];\r\n  const map = getMap(maskfield);\r\n\r\n  // Push every map values into fieldsName array\r\n  map.forEach((mapObject) => fieldsName.push(...mapObject.values));\r\n\r\n  // Remove duplicates\r\n  return fieldsName.filter((elem, index, self) => index === self.indexOf(elem));\r\n};\r\n\r\nconst getMapFields = (maskfield: Element) => {\r\n  const parentForm = maskfield.querySelector(\"input\").form;\r\n\r\n  const uniqueFieldsName = getUniqueFieldsName(maskfield);\r\n\r\n  // Map them into their corresponding dom field\r\n  return uniqueFieldsName.map(\r\n    (field) =>\r\n      document\r\n        .getElementById(parentForm.name + \"_\" + field)\r\n        .closest(\".form-group\").parentElement\r\n  );\r\n};\r\n\r\nconst handleField = (maskfield: Element) => {\r\n  const value = getValue(maskfield);\r\n\r\n  handleMapFields(maskfield, value);\r\n};\r\n\r\nconst handleMapFields = (maskfield: Element, value: string) => {\r\n  const parentForm = maskfield.querySelector(\"input\").form;\r\n  const map = getMap(maskfield);\r\n  const fields = getMapFields(maskfield);\r\n  // TODO Compare map and fields\r\n  // TODO find fields \"parent\" container, when hiding, also \"remove\" 'flex-fill' elements above?(or after)\r\n\r\n  const selectedMapObject = map.find((mapObject) => mapObject.key === value);\r\n\r\n  const visibleFields = selectedMapObject ? selectedMapObject.values : [];\r\n\r\n  fields.forEach((field) => {\r\n    const fieldInput = field.querySelector(\"input\");\r\n    const fieldNameID = fieldInput.id.substring(parentForm.name.length + 1);\r\n\r\n    if (!visibleFields.includes(fieldNameID)) {\r\n      // Hide and clear input\r\n      field.style.display = \"none\";\r\n      fieldInput.value = undefined;\r\n      return;\r\n    }\r\n\r\n    field.style.display = \"unset\";\r\n  });\r\n};\r\n\r\n// What if multiple maskfield \"holds\" same input ?\r\n// Check sonata maskfield behaviour (checked, it's display: none;)\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import './ts/maskfield'"],"names":["document","addEventListener","querySelectorAll","forEach","maskfield","handleField","getMap","uniqID","classList","substring","mapElement","querySelector","map","Array","from","children","item","push","key","getAttribute","values","JSON","parse","getMapFields","parentForm","form","uniqueFieldsName","fieldsName","mapObject","filter","elem","index","self","indexOf","getUniqueFieldsName","field","getElementById","name","closest","parentElement","value","isRadio","radios","checked","find","radio","isSelect","getValue","handleMapFields","fields","selectedMapObject","visibleFields","fieldInput","fieldNameID","id","length","includes","style","display","undefined","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__"],"sourceRoot":""}